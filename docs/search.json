[
  {
    "objectID": "homework3quarto.html",
    "href": "homework3quarto.html",
    "title": "Homework3quarto",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv? &gt; &gt; “../MyData.csv” &gt;\nWhat are the major benefits of using R projects?\n\n\nThe major benefits of using an R project is it is easy to organize your different projects. Each R project will have its own working directory, workspace, history, and folder structure / source documents. If you share your R project with someone, the paths are much more likely to work and they will have access to everything they need. You can also connect your R project to github very easily and track / update progress consistently.\n\n\nWhat is git and what is github?\n\n\nGit is a version control software, and Github is an online hosting service for Git-based projects.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nThe printing aspect of a tibble and a data.frame are different, the tibble output only shows the first few rows/columns. Also, tibbles do not coerce down to a vector when you subset to only one column.\n\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;\n1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\nRewritten code:\n\niris |&gt;\n  as_tibble() |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLong format data is where each row consists of one observation and each column one variable. Wide format is when we may have more than one observation in a given row. Generally, for statistical analysis we prefer long-format data."
  },
  {
    "objectID": "homework3quarto.html#task-1-conceptual-questions",
    "href": "homework3quarto.html#task-1-conceptual-questions",
    "title": "Homework3quarto",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv? &gt; &gt; “../MyData.csv” &gt;\nWhat are the major benefits of using R projects?\n\n\nThe major benefits of using an R project is it is easy to organize your different projects. Each R project will have its own working directory, workspace, history, and folder structure / source documents. If you share your R project with someone, the paths are much more likely to work and they will have access to everything they need. You can also connect your R project to github very easily and track / update progress consistently.\n\n\nWhat is git and what is github?\n\n\nGit is a version control software, and Github is an online hosting service for Git-based projects.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nThe printing aspect of a tibble and a data.frame are different, the tibble output only shows the first few rows/columns. Also, tibbles do not coerce down to a vector when you subset to only one column.\n\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;\n1.55), Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\nRewritten code:\n\niris |&gt;\n  as_tibble() |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt;\n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLong format data is where each row consists of one observation and each column one variable. Wide format is when we may have more than one observation in a given row. Generally, for statistical analysis we prefer long-format data."
  },
  {
    "objectID": "homework3quarto.html#task-2-reading-delimited-data",
    "href": "homework3quarto.html#task-2-reading-delimited-data",
    "title": "Homework3quarto",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\n\nGlass Data\nFirst, I will read in the data and add the appropriate column names.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'readr' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.4.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nglass &lt;- read_csv(\"C:\\\\Users\\\\oferr\\\\Desktop\\\\558\\\\Homework3\\\\glass.data\", \n                       col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\",\"Ba\",\"Fe\", \"Type_of_Glass\"), show_col_types = FALSE)\n\nNow I will start a chain and update the last variable while adding specifications to the data:\n\nglass &lt;- glass |&gt;\n  mutate(Type_of_Glass = \n              ifelse(Type_of_Glass == 1, \"building_windows_float_processed\",\n              ifelse(Type_of_Glass == 2, \"building_windows_non_float_processed\",\n              ifelse(Type_of_Glass == 3, \"vehicle_windows_float_processed\",\n              ifelse(Type_of_Glass == 4, \"vehicle_windows_non_float_processed\",\n              ifelse(Type_of_Glass == 5, \"containers\",\n              ifelse(Type_of_Glass == 6, \"tableware\", \"headlamps\"))))))) |&gt;\n# now i will filter to only keep rows where Fe &lt; 0.2 and the type of glass is either tableware and headlamps.\n  filter(Fe &lt; 0.2, Type_of_Glass == \"tableware\" | Type_of_Glass == \"headlamps\")\n# printing the data:\nglass\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast Data\n\nyeast &lt;- read_fwf(\"C:\\\\Users\\\\oferr\\\\Desktop\\\\558\\\\Homework3\\\\yeast.data\", \n                       fwf_widths(c(10,6,6,6,6,6,6,6,6,4),\n                                  c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \n                                    \"mit\", \"erl\", \"pox\", \"vac\",\"nuc\",\"class\")),show_col_types = FALSE)\n\nNow I will manipulate the data:\n\nyeast &lt;- yeast |&gt;\n  select(-c(\"seq_name\",\"nuc\")) |&gt; # only selecting columns that are not seq_name, nuc\n  group_by(class) |&gt; # grouping by class\n  mutate(\n         across(where(is.numeric), mean, .names = \"mean_{.col}\"),\n         across(where(is.numeric) & !starts_with(\"mean\"), median, .names = \"median_{.col}\"))\n\n# here I am adding mean to the numeric columns and then adding median to the same columns, but I had to specify to not apply it to those that starts with mean\n         \n# printing the data:\nyeast\n\n# A tibble: 1,484 × 22\n# Groups:   class [8]\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg mean_gvh mean_alm\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MI       0.521    0.533    0.517\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MI       0.521    0.533    0.517\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MI       0.521    0.533    0.517\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NU       0.452    0.456    0.529\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MI       0.521    0.533    0.517\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CY       0.481    0.470    0.535\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MI       0.521    0.533    0.517\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NU       0.452    0.456    0.529\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MI       0.521    0.533    0.517\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CY       0.481    0.470    0.535\n# ℹ 1,474 more rows\n# ℹ 11 more variables: mean_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, mean_pox &lt;dbl&gt;,\n#   mean_vac &lt;dbl&gt;, median_mcg &lt;dbl&gt;, median_gvh &lt;dbl&gt;, median_alm &lt;dbl&gt;,\n#   median_mit &lt;dbl&gt;, median_erl &lt;dbl&gt;, median_pox &lt;dbl&gt;, median_vac &lt;dbl&gt;"
  },
  {
    "objectID": "homework3quarto.html#task-2-combining-excel-and-delimited-data",
    "href": "homework3quarto.html#task-2-combining-excel-and-delimited-data",
    "title": "Homework3quarto",
    "section": "Task 2: Combining Excel and Delimited Data",
    "text": "Task 2: Combining Excel and Delimited Data\nReading in excel data:\n\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.3.3\n\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\")\n# printing the data:\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nAccessing the second sheet of variable names:\n\nvariables &lt;- read_excel(\"white-wine.xlsx\", sheet = \"variables\")\ncolnames(white_wine) &lt;- pull(variables)\n# adding the variable type, with value \"white\"\nwhite_wine$type &lt;- \"white\"\n\nAccessing and reading in red wine data set:\n\nred_wine &lt;- read_delim(\"red-wine.csv\", delim = \";\",show_col_types = FALSE)\ncolnames(red_wine) &lt;- pull(variables)\n# adding the variable type, with value \"red\"\nred_wine$type &lt;- \"red\"\n\nCombining the datasets:\n\ncombined_data &lt;- dplyr::bind_rows(white_wine,red_wine)\ncombined_data &lt;- combined_data |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(\"mean_alcohol_by_quality\" = mean(alcohol),\n         \"sd_alcohol_by_quality\" = sd(alcohol))\n# adding mean and standard deviation columns"
  },
  {
    "objectID": "homework3quarto.html#task-3-database-practice",
    "href": "homework3quarto.html#task-3-database-practice",
    "title": "Homework3quarto",
    "section": "Task 3: Database Practice",
    "text": "Task 3: Database Practice\n\nlibrary(DBI)\n\nWarning: package 'DBI' was built under R version 4.3.3\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"lahman.db\") # creating the connection to the db\ndbListTables(con) # listing the different data sets\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n\nlibrary(RSQLite)\n\nWarning: package 'RSQLite' was built under R version 4.3.3\n\nlibrary(dplyr)\nteams &lt;- tbl(con, \"Teams\") |&gt;\n  filter(yearID == 2015) |&gt;\n  collect()\n# accessing the teams data set and filtering to where year is only 2015\n\nRepeating above using sql() function:\n\nteams2 &lt;- tbl(con, sql(\n\"SELECT *\nFROM `Teams`\nWHERE (`yearID` = 2015.0)\")\n) |&gt;\ncollect()\n\nNow I will access the hall of fame data set and only include player, year, and category while also filtering to only include inducted individuals.\n\nhall_of_fame &lt;- tbl(con, \"HallOfFame\") |&gt;\n  filter(inducted == \"Y\") |&gt;\n  select(playerID, yearID, category)|&gt;\n  collect()\n\nNow, I will combine this data set with the people one, to combine the names into the data set, through an inner join.\n\nhall_of_fame_names &lt;- inner_join(tbl(con, \"People\") |&gt; \n                                   select(playerID, nameFirst, nameLast) |&gt; \n                                   collect(), \n                                 hall_of_fame, \n                                 by = join_by(playerID == playerID)) |&gt; \n  collect()\n\nNow I will access the managers data set, and summarize to get the total games managed, won, and lost.\n\nmanagers &lt;- tbl(con, \"Managers\") |&gt; \n  select(playerID, G, W, L) |&gt; \n  group_by(playerID) |&gt; \n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt; \n  collect() |&gt; \n  mutate(\"Total_W/G_managed\" = (Total_W / G_managed)) |&gt; \n  # creating the total win loss percentage\n  arrange(desc(Total_W/G_managed)) \n  # sorting by descending percentage\n\n\nfinal &lt;- inner_join(managers,\n                    hall_of_fame_names, \n                    by = join_by(playerID == playerID)) |&gt; \n  collect()\n# printing the data set\nfinal\n\n# A tibble: 97 × 9\n   playerID  G_managed Total_W Total_L `Total_W/G_managed` nameFirst nameLast  \n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;               &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;     \n 1 simmote01         1       1       0               1     Ted       Simmons   \n 2 wrighge01        85      59      25               0.694 George    Wright    \n 3 spaldal01       126      78      47               0.619 Al        Spalding  \n 4 mccarjo99      3487    2125    1333               0.609 Joe       McCarthy  \n 5 comisch01      1410     840     541               0.596 Charlie   Comiskey  \n 6 southbi01      1770    1044     704               0.590 Billy     Southworth\n 7 seleefr99      2180    1284     862               0.589 Frank     Selee     \n 8 chancfr01      1622     946     648               0.583 Frank     Chance    \n 9 weaveea99      2541    1480    1060               0.582 Earl      Weaver    \n10 lopezal01      2425    1410    1004               0.581 Al        Lopez     \n# ℹ 87 more rows\n# ℹ 2 more variables: yearID &lt;int&gt;, category &lt;chr&gt;"
  }
]