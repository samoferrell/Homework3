---
title: "Homework3quarto"
format: html
editor: visual
---

## Task 1: Conceptual Questions

1.  If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?

> The relative path I would use is: "../MyData.csv"

2.  What are the major benefits of using R projects?

> The major benefits of using an R project is it is easy to organize your different projects. Each R project will have its own working directory, workspace, history, and folder structure / source documents. If you share your R project with someone, the paths are much more likely to work and they will have access to everything they need. You can also connect your R project to github very easily and track / update progress consistently.

3.  What is git and what is github?

> Git is a version control software, and Github is an online hosting service for Git-based projects.

4.  What are the two main differences between a tibble and a data.frame?

> The printing aspect of a tibble and a data.frame are different, the tibble output only shows the first few rows/columns. Also, tibbles do not coerce down to a vector when you subset to only one column.

5.  Rewrite the following nested function call using baseRâ€™s chaining operator:

```{r}
library(dplyr)
arrange(filter(select(as_tibble(iris), starts_with("Petal"), Species), Petal.Length <
1.55), Species)
```

Rewritten code:

```{r}
iris |>
  as_tibble() |>
  select(starts_with("Petal"), Species) |>
  filter(Petal.Length < 1.55) |>
  arrange(Species)
```

6.  What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?

> Long format data is where each row consists of one observation and each column one variable. Wide format is when we may have more than one observation in a given row. Generally, for statistical analysis we prefer long-format data.

## Task 2: Reading Delimited Data

### Glass Data

First, I will read in the data and add the appropriate column names.

```{r}
library(tidyverse)
library(readr)
glass <- read_csv("C:\\Users\\oferr\\Desktop\\558\\Homework3\\glass.data", 
                       col_names = c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca","Ba","Fe", "Type_of_Glass"), show_col_types = FALSE)
```

Now I will start a chain and update the last variable while adding specifications to the data:

```{r}
glass <- glass |>
  mutate(Type_of_Glass = 
              ifelse(Type_of_Glass == 1, "building_windows_float_processed",
              ifelse(Type_of_Glass == 2, "building_windows_non_float_processed",
              ifelse(Type_of_Glass == 3, "vehicle_windows_float_processed",
              ifelse(Type_of_Glass == 4, "vehicle_windows_non_float_processed",
              ifelse(Type_of_Glass == 5, "containers",
              ifelse(Type_of_Glass == 6, "tableware", "headlamps"))))))) |>
# now i will filter to only keep rows where Fe < 0.2 and the type of glass is either tableware and headlamps.
  filter(Fe < 0.2, Type_of_Glass == "tableware" | Type_of_Glass == "headlamps")
# printing the data:
glass
```

### Yeast Data

```{r}
yeast <- read_fwf("C:\\Users\\oferr\\Desktop\\558\\Homework3\\yeast.data", 
                       fwf_widths(c(11,6,6,6,6,6,6,6,6,6),
                                  c("seq_name", "mcg", "gvh", "alm", 
                                    "mit", "erl", "pox", "vac","nuc","class")),show_col_types = FALSE)
```

Now I will manipulate the data:

```{r}
yeast <- yeast |>
  select(-c("seq_name","nuc")) |> # only selecting columns that are not seq_name, nuc
  group_by(class) |> # grouping by class
  mutate(
         across(where(is.numeric), mean, .names = "mean_{.col}"),
         across(where(is.numeric) & !starts_with("mean"), median, .names = "median_{.col}"))

# here I am adding mean to the numeric columns and then adding median to the same columns, but I had to specify to not apply it to those that starts with mean
         
# printing the data:
yeast
```

## Task 2: Combining Excel and Delimited Data

Reading in excel data:

```{r}
library(readxl)
white_wine <- read_excel("white-wine.xlsx")
# printing the data:
white_wine
```

Accessing the second sheet of variable names:

```{r}
variables <- read_excel("white-wine.xlsx", sheet = "variables")
colnames(white_wine) <- pull(variables)
# adding the variable type, with value "white"
white_wine$type <- "white"
```

Accessing and reading in red wine data set:

```{r}
red_wine <- read_delim("red-wine.csv", delim = ";",show_col_types = FALSE)
colnames(red_wine) <- pull(variables)
# adding the variable type, with value "red"
red_wine$type <- "red"
```

Combining the datasets:

```{r}
combined_data <- dplyr::bind_rows(white_wine,red_wine)
combined_data <- combined_data |>
  filter(quality > 6.5, alcohol < 132) |>
  arrange(desc(quality)) |>
  select(contains("acid"), alcohol, type, quality) |>
  group_by(quality) |>
  mutate("mean_alcohol_by_quality" = mean(alcohol),
         "sd_alcohol_by_quality" = sd(alcohol))
# adding mean and standard deviation columns
combined_data
```

## Task 3: Database Practice

```{r}
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "lahman.db") # creating the connection to the db
dbListTables(con) # listing the different data sets
```

```{r}
library(RSQLite)
library(dplyr)
teams <- tbl(con, "Teams") |>
  filter(yearID == 2015) |>
  collect()
# accessing the teams data set and filtering to where year is only 2015
teams
```

Repeating above using sql() function:

```{r}
teams2 <- tbl(con, sql(
"SELECT *
FROM `Teams`
WHERE (`yearID` = 2015.0)")
) |>
collect()
teams2
```

Now I will access the hall of fame data set and only include player, year, and category while also filtering to only include inducted individuals.

```{r}
hall_of_fame <- tbl(con, "HallOfFame") |>
  filter(inducted == "Y") |>
  select(playerID, yearID, category)|>
  collect()
hall_of_fame
```

Now, I will combine this data set with the people one, to combine the names into the data set, through an inner join.

```{r}
hall_of_fame_names <- inner_join(tbl(con, "People") |> 
                                   select(playerID, nameFirst, nameLast) |> 
                                   collect(), 
                                 hall_of_fame, 
                                 by = join_by(playerID == playerID)) |> 
  collect()
hall_of_fame_names
```

Now I will access the managers data set, and summarize to get the total games managed, won, and lost.

```{r}
managers <- tbl(con, "Managers") |> 
  select(playerID, G, W, L) |> 
  group_by(playerID) |> 
  summarize(G_managed = sum(G, na.rm = TRUE),
            Total_W = sum(W, na.rm = TRUE),
            Total_L = sum(L, na.rm = TRUE)) |> 
  collect() |> 
  mutate("Total_W/G_managed" = (Total_W / G_managed)) |> 
  # creating the total win loss percentage
  arrange(desc(Total_W/G_managed)) 
  # sorting by descending percentage
managers
```

```{r}
final <- inner_join(managers,
                    hall_of_fame_names, 
                    by = join_by(playerID == playerID)) |> 
  collect()
# printing the data set
final
```
